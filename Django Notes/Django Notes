Web Technologies
CSS
AJAJX - Asynchronous JavaScript and XML
	Brings asynchronous swapping between the client and the server, no need to refresh the page for the website.
	JavaScript
	JSON
	XML
HTML 5 version
Java Script

LAMP - Linux  MySQL 

Django 
MVC Model-View-Controller pattern, which enables a coherent architecture

Before the MVC framework existed, web programming mixed the database access code and the main code of the page. 

The MVC pattern was created to separate logic from representation and have an internal architecture that is more tangible and real. The Model-View-Controller (MVC) represents  three application layers

	Models: These represent data organization in a database. In simple words, we can say that each model defines a table in the database and the relations between other models. It's thanks to them that every bit of data is stored in the database.
	Python code is in models.

	Views (Templates in django): These contain all the information that will be sent to the client. They make views that the final HTML document will generate. We can associate the HTML code with the views. Note Django replaces views ith Templates 
	HTML code is in templates

	Controllers (Views in Django): These contain all the actions performed by the server and are not visible to the client. The controller checks whether the user is authenticated or it can generate the HTML code from a template.
	Python code is in views 

Django, uses an MVT pattern. In this pattern, views are replaced by templates and controllers are replaced by views. 


Django fundamental concepts

virtualenv
	source djang/bin/activate
	which python -> points to a local version


Absolute paths can be found:
	example settings.py
	DIR = os.path.abspath(os.path.dirname(__file__))
	.. later ..
	Databases = {
			'default' :{
				'ENGINE': django.db.backends.sqlite3,
				'NAME' : os.path.join(DIR,'database.sqlite3'),
				'USER' : etc etc etc......
			}
	}


Django Modules To Explore
	pip
	virtualenv
	fabric to deploy??
	IPython
	database migrations django.contrib
	django-debug-toolbar (HTML interface on the side xray view into django)
	django-extras - makemake management commands
	crispy-forms floppy-forms - nice forms
	Haystack - API search engines - offer search engines
	Tasty Pie - RESTful API for Django - interact with Javascript
	Celery - Distributed Task Queue - an asynchronous task queue/job queue based on 		distributed message passing.	
	easy-thumbnails - images
	django-reversion
	django-grapelli - pretty, custom dashboard, drag and drop order of records, autolookup
	more for registration, appointments, tagging, menus, ...

Fabric is a SSH automatization tool
-
Run a sequence of shell commands on a remote machine.
-
Useful for running cron jobs, database migrations, etc.
-
Easy to integrate to Boto to automatically run shell commands on thecurrently running EC2 instances (which have dynamic IPs)

Tasty Pie - RESTful API for Django - interact with Javascript
	Web based API on top of Django, Designed for extention
	Get 
	Post
	Concepts
	Graceful Degradation

	Flexible everything customizable interface
		Data can round trip aything you can get should put
	Reasonable defautls
	URIs everywhere - 
		HATEOAS - Hypermedia As the Engine of Application State
		The user shouldn't have to know anything in advance
		You get URIs back - All about exploreability
		Deep linking


	Full CRUD Methods create, read, update and delete are the four basic functions of persistent storage.

			Operation			SQL		HTTP
			Create				INSERT	PUT / POST	
			Read (Retrieve)		SELECT	GET
			Update (Modify)		UPDATE	PUT / PATCH	
			Delete (Destroy)	DELETE	DELETE

	Any data source

	Flexible serialization, JSON, YAML, XML, bplist

	pip django-tastypie

----------------------------------------------------------------------
Creating a Django Project

check version: python -c "import django; print(django.get_version())"

django-admin.py startproject <project_name>
Manage.py startapp <app_name>


RDS Database
Django sees RDS instances as ordinary MySQL servers
Configure hostname/username/password normally in settings.py

Since 1.2, Django supports multiple databases
-
In settings.py: DATABASE
➭
DATABASES
•
 This works nicely together with Amazon RDS
-
RDS gives you the IP/hostname of each launched MySQL instance.
-
 The instances can also be tagged and enumerated using Boto.
•
 Automated configuration
-
Integrate settings.py directly to AWS with Boto (enumerate RDS hosts).
-
Or pre-generate settings.py and distribute via Puppet.
-
Or pre-generate a JSON file, distribute via Puppet, and load it in settings.py.

BOTO &SETTINGS.PY 
•
If you work with AWS, you need Boto
-
Full Python access to all AWS APIs.
-
Includes command line utilities, e.g. route53
•
Use Git version (not PyPI) to get all latest features
-
pip install -e git+https://github.com/boto/boto.git#egg=boto
-
Ubuntu also uses Boto, so put your own version in a virtualenv.
•
Use in Django settings.py to automatize configuration
-
Enumerate EC2 instances, RDS instances, get IP addresses.
-
 Tag your instances in a smart way to help enumeration.
-
Risk: AWS access key has to be available. IAM may he


# settings.py
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'read_default_file': '/path/to/my.cnf',
        },
    }
}


# my.cnf
[client]
database = NAME
user = USER
password = PASSWORD
default-character-set = utf8



