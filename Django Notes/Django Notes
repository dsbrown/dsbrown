Web Technologies
CSS
AJAJX - Asynchronous JavaScript and XML
	Brings asynchronous swapping between the client and the server, no need to refresh the page for the website.
	JavaScript
	JSON
	XML
HTML 5 version
Java Script

LAMP - Linux  MySQL 

Django 
MVC Model-View-Controller pattern, which enables a coherent architecture

Before the MVC framework existed, web programming mixed the database access code and the main code of the page. 

The MVC pattern was created to separate logic from representation and have an internal architecture that is more tangible and real. The Model-View-Controller (MVC) represents  three application layers

	Models: These represent data organization in a database. In simple words, we can say that each model defines a table in the database and the relations between other models. It's thanks to them that every bit of data is stored in the database.
	Python code is in models.

	Views (Templates in django): These contain all the information that will be sent to the client. They make views that the final HTML document will generate. We can associate the HTML code with the views. Note Django replaces views ith Templates 
	HTML code is in templates

	Controllers (Views in Django): These contain all the actions performed by the server and are not visible to the client. The controller checks whether the user is authenticated or it can generate the HTML code from a template.
	Python code is in views 

Django, uses an MVT pattern. In this pattern, views are replaced by templates and controllers are replaced by views. 


Django fundamental concepts

virtualenv
	source djang/bin/activate
	which python -> points to a local version


Absolute paths can be found:
	example settings.py
	DIR = os.path.abspath(os.path.dirname(__file__))
	.. later ..
	Databases = {
			'default' :{
				'ENGINE': django.db.backends.sqlite3,
				'NAME' : os.path.join(DIR,'database.sqlite3'),
				'USER' : etc etc etc......
			}
	}


Django Modules To Explore
	pip
	virtualenv
	fabric to deploy??
	IPython
	database migrations django.contrib
	django-debug-toolbar (HTML interface on the side xray view into django)
	django-extras - makemake management commands
	crispy-forms floppy-forms - nice forms
	Haystack - API search engines - offer search engines
	Tasty Pie - RESTful API for Django - interact with Javascript
	Celery - Distributed Task Queue - an asynchronous task queue/job queue based on 		distributed message passing.	
	easy-thumbnails - images
	django-reversion
	django-grapelli - pretty, custom dashboard, drag and drop order of records, autolookup
	more for registration, appointments, tagging, menus, ...

Fabric is a SSH automatization tool
-
Run a sequence of shell commands on a remote machine.
-
Useful for running cron jobs, database migrations, etc.
-
Easy to integrate to Boto to automatically run shell commands on thecurrently running EC2 instances (which have dynamic IPs)

Tasty Pie - RESTful API for Django - interact with Javascript
	Web based API on top of Django, Designed for extention
	Get 
	Post
	Concepts
	Graceful Degradation

	Flexible everything customizable interface
		Data can round trip aything you can get should put
	Reasonable defautls
	URIs everywhere - 
		HATEOAS - Hypermedia As the Engine of Application State
		The user shouldn't have to know anything in advance
		You get URIs back - All about exploreability
		Deep linking


	Full CRUD Methods create, read, update and delete are the four basic functions of persistent storage.

			Operation			SQL		HTTP
			Create				INSERT	PUT / POST	
			Read (Retrieve)		SELECT	GET
			Update (Modify)		UPDATE	PUT / PATCH	
			Delete (Destroy)	DELETE	DELETE

	Any data source

	Flexible serialization, JSON, YAML, XML, bplist

	pip django-tastypie

----------------------------------------------------------------------
Creating a Django Project

check version: python -c "import django; print(django.get_version())"

django-admin.py startproject <project_name>
Manage.py startapp <app_name>


RDS Database
Django sees RDS instances as ordinary MySQL servers
Configure hostname/username/password normally in settings.py

Since 1.2, Django supports multiple databases
-
In settings.py: DATABASE
➭
DATABASES
•
 This works nicely together with Amazon RDS
-
RDS gives you the IP/hostname of each launched MySQL instance.
-
 The instances can also be tagged and enumerated using Boto.
•
 Automated configuration
-
Integrate settings.py directly to AWS with Boto (enumerate RDS hosts).
-
Or pre-generate settings.py and distribute via Puppet.
-
Or pre-generate a JSON file, distribute via Puppet, and load it in settings.py.

BOTO &SETTINGS.PY 
•
If you work with AWS, you need Boto
-
Full Python access to all AWS APIs.
-
Includes command line utilities, e.g. route53
•
Use Git version (not PyPI) to get all latest features
-
pip install -e git+https://github.com/boto/boto.git#egg=boto
-
Ubuntu also uses Boto, so put your own version in a virtualenv.
•
Use in Django settings.py to automatize configuration
-
Enumerate EC2 instances, RDS instances, get IP addresses.
-
 Tag your instances in a smart way to help enumeration.
-
Risk: AWS access key has to be available. IAM may he


# settings.py
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'read_default_file': '/path/to/my.cnf',
        },
    }
}


# my.cnf
[client]
database = NAME
user = USER
password = PASSWORD
default-character-set = utf8



Projects vs. apps

What’s the difference between a project and an app? An app is a Web
application that does something – e.g., a Weblog system, a database of
public records or a simple poll app. A project is a collection of
configuration and apps for a particular Web site. A project can contain
multiple apps. An app can be in multiple projects. Your apps can live
anywhere on your Python path. In this tutorial, we’ll create our poll
app right next to your manage.py file so that it can be imported as its
own top-level module, rather than a submodule of mysite.

To create your app, make sure you’re in the same directory as manage.py
and type this command:

$ python manage.py startapp polls That’ll create a directory polls,
which is laid out like this:

polls/ __init__.py admin.py migrations/ __init__.py models.py tests.py
views.py This directory structure will house the poll application.

The first step in writing a database Web app in Django is to define your
models – essentially, your database layout, with additional metadata.

Philosophy

A model is the single, definitive source of data about your data. It
contains the essential fields and behaviors of the data you’re storing.
Django follows the DRY Principle. The goal is to define your data model
in one place and automatically derive things from it.

This includes the migrations - unlike in Ruby On Rails, for example,
migrations are entirely derived from your models file, and are
essentially just a history that Django can roll through to update your
database schema to match your current models. In our simple poll app,
we’ll create two models: Question and Choice. A Question has a question
and a publication date. A Choice has two fields: the text of the choice
and a vote tally. Each Choice is associated with a Question.

These concepts are represented by simple Python classes. Edit the
polls/models.py file so it looks like this:

polls/models.py from django.db import models


class Question(models.Model): question_text =
models.CharField(max_length=200) pub_date = models.DateTimeField('date
published')


class Choice(models.Model): question = models.ForeignKey(Question)
choice_text = models.CharField(max_length=200) votes =
models.IntegerField(default=0) The code is straightforward. Each model
is represented by a class that subclasses django.db.models.Model. Each
model has a number of class variables, each of which represents a
database field in the model.

Each field is represented by an instance of a Field class – e.g.,
CharField for character fields and DateTimeField for datetimes. This
tells Django what type of data each field holds.

The name of each Field instance (e.g. question_text or pub_date) is the
field’s name, in machine-friendly format. You’ll use this value in your
Python code, and your database will use it as the column name.

You can use an optional first positional argument to a Field to
designate a human-readable name. That’s used in a couple of
introspective parts of Django, and it doubles as documentation. If this
field isn’t provided, Django will use the machine-readable name. In this
example, we’ve only defined a human-readable name for Question.pub_date.
For all other fields in this model, the field’s machine-readable name
will suffice as its human-readable name.

Some Field classes have required arguments. CharField, for example,
requires that you give it a max_length. That’s used not only in the
database schema, but in validation, as we’ll soon see.

A Field can also have various optional arguments; in this case, we’ve
set the default value of votes to 0.

Finally, note a relationship is defined, using ForeignKey. That tells
Django each Choice is related to a single Question. Django supports all
the common database relationships: many-to-one, many-to-many and
one-to-one.

Activating models¶

That small bit of model code gives Django a lot of information. With it,
Django is able to:

Create a database schema (CREATE TABLE statements) for this app. Create
a Python database-access API for accessing Question and Choice objects.
But first we need to tell our project that the polls app is installed.

Philosophy

Django apps are “pluggable”: You can use an app in multiple projects,
and you can distribute apps, because they don’t have to be tied to a
given Django installation. Edit the mysite/settings.py file again, and
change the INSTALLED_APPS setting to include the string 'polls'. So
it’ll look like this:

mysite/settings.py INSTALLED_APPS = ( 'django.contrib.admin',
'django.contrib.auth', 'django.contrib.contenttypes',
'django.contrib.sessions', 'django.contrib.messages',
'django.contrib.staticfiles', 'polls', ) Now Django knows to include the
polls app. Let’s run another command:

$ python manage.py makemigrations polls You should see something similar
to the following:

Migrations for 'polls': 0001_initial.py: - Create model Question -
Create model Choice - Add field question to choice By running
makemigrations, you’re telling Django that you’ve made some changes to
your models (in this case, you’ve made new ones) and that you’d like the
changes to be stored as a migration.

Migrations are how Django stores changes to your models (and thus your
database schema) - they’re just files on disk. You can read the
migration for your new model if you like; it’s the file
polls/migrations/0001_initial.py. Don’t worry, you’re not expected to
read them every time Django makes one, but they’re designed to be
human-editable in case you want to manually tweak how Django changes
things.

There’s a command that will run the migrations for you and manage your
database schema automatically - that’s called migrate, and we’ll come to
it in a moment - but first, let’s see what SQL that migration would run.
The sqlmigrate command takes migration names and returns their SQL:

$ python manage.py sqlmigrate polls 0001 You should see something
similar to the following (we’ve reformatted it for readability):

BEGIN; CREATE TABLE polls_question ( "id" serial NOT NULL PRIMARY KEY,
"question_text" varchar(200) NOT NULL, "pub_date" timestamp with time
zone NOT NULL );

CREATE TABLE polls_choice ( "id" serial NOT NULL PRIMARY KEY,
"question_id" integer NOT NULL, "choice_text" varchar(200) NOT NULL,
"votes" integer NOT NULL );

CREATE INDEX polls_choice_7aa0f6ee ON "polls_choice" ("question_id");

ALTER TABLE "polls_choice" ADD CONSTRAINT
polls_choice_question_id_246c99a640fbbd72_fk_polls_question_id FOREIGN
KEY ("question_id") REFERENCES "polls_question" ("id") DEFERRABLE
INITIALLY DEFERRED; COMMIT; Note the following:

The exact output will vary depending on the database you are using. The
example above is generated for PostgreSQL. Table names are automatically
generated by combining the name of the app (polls) and the lowercase
name of the model – question and choice. (You can override this
behavior.) Primary keys (IDs) are added automatically. (You can override
this, too.) By convention, Django appends "_id" to the foreign key field
name. (Yes, you can override this, as well.) The foreign key
relationship is made explicit by a FOREIGN KEY constraint. Don’t worry
about the DEFERRABLE parts; that’s just telling PostgreSQL to not
enforce the foreign key until the end of the transaction. It’s tailored
to the database you’re using, so database-specific field types such as
auto_increment (MySQL), serial (PostgreSQL), or integer primary key
autoincrement (SQLite) are handled for you automatically. Same goes for
quoting of field names – e.g., using double quotes or single quotes. The
sqlmigrate command doesn’t actually run the migration on your database -
it just prints it to the screen so that you can see what SQL Django
thinks is required. It’s useful for checking what Django is going to do
or if you have database administrators who require SQL scripts for
changes. If you’re interested, you can also run python manage.py check;
this checks for any problems in your project without making migrations
or touching the database.

Now, run migrate again to create those model tables in your database:

$ python manage.py migrate Operations to perform: Apply all migrations:
admin, contenttypes, polls, auth, sessions Running migrations: Applying
<migration name>... OK The migrate command takes all the migrations that
haven’t been applied (Django tracks which ones are applied using a
special table in your database called django_migrations) and runs them
against your database - essentially, synchronizing the changes you made
to your models with the schema in the database.

Migrations are very powerful and let you change your models over time,
as you develop your project, without the need to delete your database or
tables and make new ones - it specializes in upgrading your database
live, without losing data. We’ll cover them in more depth in a later
part of the tutorial, but for now, remember the three-step guide to
making model changes:

Change your models (in models.py). Run python manage.py makemigrations
to create migrations for those changes Run python manage.py migrate to
apply those changes to the database. The reason there’s separate
commands to make and apply migrations is because you’ll commit
migrations to your version control system and ship them with your app;
they not only make your development easier, they’re also useable by
other developers and in production.

Read the django-admin.py documentation for full information on what the
manage.py utility can do.






